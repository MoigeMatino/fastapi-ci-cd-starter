name: fastapi-cicd-starter

on:
  push:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Create .env file
        run: |
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          
      - name: Check .env file content
        run: cat .env

          
      - name: Build and run Docker Compose
        run: |
          docker compose --env-file .env up -d --build

      - name: Wait for services and verify health
        run: |
          # Wait for containers to start
          sleep 10
  
          # Check if containers are running
          docker compose ps
  
          # Wait for FastAPI service to be ready (adjust the port if different)
          timeout=60
          while ! curl -s http://localhost:8000/health > /dev/null; do
            if [ $timeout -le 0 ]; then
              echo "Timeout waiting for FastAPI service"
              docker compose logs
              exit 1
            fi
            echo "Waiting for FastAPI service... ($timeout seconds remaining)"
            sleep 5
            timeout=$((timeout - 5))
          done
  
          # Check PostgreSQL
          until docker compose exec -T db pg_isready; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run tests
        run: |
          docker compose exec -T app pytest 

      - name: Shut down Docker Compose
        if: always()
        run: |
          docker compose down
  
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
      
      - name: Build Docker image
        run: |
          docker build -t my-fastapi-app .
    
      - name: Tag and push Docker image
        run: |
          docker tag my-fastapi-app ${{ secrets.DOCKER_HUB_USERNAME }}/my-fastapi-app:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/my-fastapi-app:latest  
